{
  "name": "sequelize",
  "description": "Multi dialect ORM for Node.JS",
  "version": "1.6.0-beta4",
  "author": {
    "name": "Sascha Depold",
    "email": "sascha@depold.com"
  },
  "contributors": [
    {
      "name": "Sascha Depold",
      "email": "sascha@depold.com"
    },
    {
      "name": "Meg Sharkey",
      "email": "meg@metamarkets.com"
    },
    {
      "name": "Chase Geigle",
      "email": "sky@skytrife.com"
    },
    {
      "name": "Jan Aagaard Meier",
      "email": "jam@innofluence.com",
      "url": "Innofluence"
    }
  ],
  "dependencies": {
    "mysql": "~2.0.0-alpha3",
    "underscore": "~1.4.0",
    "underscore.string": "~2.3.0",
    "lingo": "~0.0.5",
    "validator": "0.3.x",
    "moment": "~1.7.0",
    "commander": "~0.6.0",
    "generic-pool": "1.0.9"
  },
  "devDependencies": {
    "jasmine-node": "1.0.17",
    "sqlite3": "~2.1.5",
    "pg": "~0.8.7",
    "buster": "~0.6.0",
    "dox-foundation": "~0.3.0",
    "watchr": "~2.2.0"
  },
  "keywords": [
    "mysql",
    "orm",
    "nodejs",
    "object relational mapper"
  ],
  "main": "index",
  "scripts": {
    "test": "npm run test-jasmine && npm run test-buster",
    "test-jasmine": "./node_modules/.bin/jasmine-node spec-jasmine/",
    "test-buster": "npm run test-buster-mysql && npm run test-buster-postgres && npm run test-buster-postgres-native && npm run test-buster-sqlite",
    "test-buster-travis": "./node_modules/.bin/buster-test",
    "test-buster-mysql": "DIALECT=mysql ./node_modules/.bin/buster-test",
    "test-buster-postgres": "DIALECT=postgres ./node_modules/.bin/buster-test",
    "test-buster-postgres-native": "DIALECT=postgres-native ./node_modules/.bin/buster-test",
    "test-buster-sqlite": "DIALECT=sqlite ./node_modules/.bin/buster-test",
    "generate-docs": "node_modules/.bin/dox-foundation --source ./lib --title Sequelize"
  },
  "bin": {
    "sequelize": "bin/sequelize"
  },
  "engines": {
    "node": ">=0.4.6"
  },
  "license": "MIT",
  "readme": "# Sequelize #\r\n\r\nThe Sequelize library provides easy access to MySQL, SQLite or PostgreSQL databases by mapping database entries to objects and vice versa. To put it in a nutshell... it's an ORM (Object-Relational-Mapper). The library is written entirely in JavaScript and can be used in the Node.JS environment.\r\n\r\n## Blogposts/Changes ##\r\n- [v1.4.1](http://blog.sequelizejs.com/post/24403298792/changes-in-sequelize-1-4-1): deprecation of node < 0.6, logging customization, ...\r\n- [v1.4.0](http://blog.sequelizejs.com/post/24345409723/changes-in-sequelize-1-4-0): postgresql, connection pooling, ...\r\n- [v1.3.0](http://blog.depold.com/post/15283366633/changes-in-sequelize-1-3-0): migrations, cross-database, validations, new listener notation, ...\r\n- [v1.2.1](http://blog.depold.com/post/12319530694/changes-in-sequelize-1-2-1): changes some defaults and some interfaces\r\n- [v1.0.0](http://blog.depold.com/post/5936116582/changes-in-sequelize-1-0-0): complete rewrite\r\n\r\n## Features ##\r\n\r\n- Schema definition\r\n- Schema synchronization/dropping\r\n- Easy definition of class/instance methods\r\n- Instance saving/updating/dropping\r\n- Asynchronous library\r\n- Associations\r\n- Importing definitions from single files\r\n\r\n## Documentation, Examples and Updates ##\r\n\r\nYou can find the documentation and announcements of updates on the [project's website](http://www.sequelizejs.com).\r\nIf you want to know about latest development and releases, follow me on [Twitter](http://twitter.com/sdepold).\r\nAlso make sure to take a look at the examples in the repository. The website will contain them soon, as well.\r\n\r\n- [Documentation](http://www.sequelizejs.com)\r\n- [Twitter](http://twitter.com/sdepold)\r\n- [IRC](irc://irc.freenode.net/sequelizejs)\r\n- [XING](https://www.xing.com/net/priec1b5cx/sequelize)\r\n\r\n## Collaboration 2.0 ##\r\n\r\nI'm glad to get pull request if any functionality is missing or something is buggy. But _please_ ... run the tests before you send me the pull request.\r\n\r\nStill interested? Coolio! Here is how to get started:\r\n\r\n### 1. Prepare your environment ###\r\n\r\nHere comes a little surprise: You need [Node.JS](http://nodejs.org). In order to be\r\na productive developer, I would recommend the latest v0.8 (or a stable 0.9 if\r\nalready out). Also I usually recommend [NVM](https://github.com/creationix/nvm).\r\n\r\nOnce Node.JS is installed on your computer, you will also have access to the lovely\r\nNode Package Manager (NPM).\r\n\r\n### 2. Database... Come to me! ###\r\n\r\nFirst class citizen of Sequelize was MySQL. Over time, Sequelize began to\r\nbecome compatible to SQLite and PostgreSQL. In order to provide a fully\r\nfeatured pull request, you would most likely want to install of them. Give\r\nit a try, it's not that hard.\r\n\r\nIf you are too lazy or just don't know how to get this work,\r\nfeel free to join the IRC channel (freenode@#sequelizejs).\r\n\r\nFor MySQL and PostgreSQL you'll need to create a DB called `sequelize_test`.\r\nFor MySQL this would look like this:\r\n\r\n```console\r\n$ echo \"CREATE DATABASE sequelize_test;\" | mysql -uroot\r\n```\r\n\r\n**CLEVER NOTE:** your local MySQL install must be with username `root`\r\n  without password. If you want to customize that just hack in the\r\n  tests, but make sure to don't commit your credentials, we don't want\r\n  to expose your personal data in sequelize codebase ;)\r\n\r\n**AND ONE LAST THING:** Once `npm install` worked for you (see below), you'll\r\nget SQLite tests for free :)\r\n\r\n\r\n### 3. Install the dependencies ###\r\n\r\nJust \"cd\" into sequelize directory and run `npm install`, see an example below:\r\n\r\n```console\r\n$ cd path/to/sequelize\r\n$ npm install\r\n```\r\n\r\n### 4. Run the tests ###\r\n\r\nRight now, the test base is split into the `spec` folder (which contains the\r\nlovely [BusterJS](http://busterjs.org) tests) and the `spec-jasmine` folder\r\n(which contains the ugly and awkward node-jasmine based tests). A main goal\r\nis to get rid of the jasmine tests!\r\n\r\nAs you might haven't installed all of the supported SQL dialects, here is how\r\nto run the test suites for your development environment:\r\n\r\n```console\r\n$ # run all tests at once:\r\n$ npm test\r\n\r\n$ # run only the jasmine tests (for all dialects):\r\n$ npm run test-jasmine\r\n\r\n$ # run all of the buster specs (for all dialects):\r\n$ npm run test-buster\r\n\r\n$ # run the buster specs for mysql:\r\n$ npm run test-buster-mysql\r\n\r\n$ # run the buster specs for sqlite:\r\n$ npm run test-buster-sqlite\r\n\r\n$ # run the buster specs for postgresql:\r\n$ npm run test-buster-postgres\r\n```\r\n\r\n### 5. That's all ###\r\n\r\nJust commit and send pull requests.\r\nHappy hacking and thank you for contributing.\r\nAh and one last thing: If you think you deserve it, feel free to add yourself to the\r\n`package.json`. Also I always look for projects which are using sequelize. If you have\r\none of them, drop me a line!\r\n\r\n\r\n# Build status\r\n\r\nThe automated tests we talk about just so much are running on\r\n[Travis public CI](http://travis-ci.org), here is its status:\r\n\r\n[![Build Status](https://secure.travis-ci.org/sdepold/sequelize.png)](http://travis-ci.org/sdepold/sequelize)\r\n",
  "readmeFilename": "README.md",
  "_id": "sequelize@1.6.0-beta4",
  "_from": "sequelize"
}
